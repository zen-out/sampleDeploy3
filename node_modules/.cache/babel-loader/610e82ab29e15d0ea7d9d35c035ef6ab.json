{"ast":null,"code":"var _jsxFileName = \"/Users/lesleycheung/Desktop/portfolio/frontend/src/components/ResumeList.js\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { resumes } from \"../dummyData/resumes\";\nimport ReactDOM from \"react-dom\";\nimport \"../assets/Accordion.css\";\n/**********************************************\n * Resume List Component\n * ==================================\n * This component accepts an array of objects, rendering out each object (including the navbar react link)\n * We gave it a function, and then rendered it inside the return block\n ***********************************************/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Panel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: 0\n    };\n  }\n\n  componentDidMount() {\n    window.setTimeout(() => {\n      const el = ReactDOM.findDOMNode(this);\n      const height = el.querySelector(\".panel__inner\").scrollHeight;\n      this.setState({\n        height\n      });\n    }, 333);\n  }\n\n  render() {\n    const {\n      //   label,\n      //   content,\n      //   array of objects\n      id,\n      institution,\n      position,\n      date,\n      type,\n      description,\n      activeTab,\n      index,\n      activateTab\n    } = this.props;\n    const {\n      height\n    } = this.state;\n    const isActive = activeTab === index;\n    const innerStyle = {\n      height: `${isActive ? height : 0}px`\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel\",\n      role: \"tabpanel\",\n      \"aria-expanded\": isActive,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"panel__label\",\n        role: \"tab\",\n        onClick: activateTab,\n        children: institution\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel__inner\",\n        style: innerStyle,\n        \"aria-hidden\": !isActive,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"panel__content\",\n          children: position\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"panel__content\",\n          children: date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass Accordion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTab: 0\n    };\n    this.activateTab = this.activateTab.bind(this);\n  }\n\n  activateTab(index) {\n    this.setState(prev => ({\n      activeTab: prev.activeTab === index ? -1 : index\n    }));\n  }\n\n  render() {\n    const {\n      panels\n    } = this.props;\n    const {\n      activeTab\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accordion\",\n      role: \"tablist\",\n      children: panels.map((panel, index) => /*#__PURE__*/_jsxDEV(Panel, {\n        activeTab: activeTab,\n        index: index,\n        ...panel,\n        activateTab: this.activateTab.bind(null, index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst panels = [{\n  label: \"Seriously, Don't Use Icon Fonts\",\n  content: 'Icons are everywhere. These \"little miracle workers\" (as John Hicks described them) help us reinforce meaning in the interfaces we design and build. Their popularity in web design has never been greater; the conciseness and versatility of pictograms in particular make them a lovely fit for displays large and small. But icons on the web have had their fair share of challenges.'\n}, {\n  label: \"Screen Readers Actually Read That Stuff\",\n  content: 'Most assistive devices will read aloud text inserted via CSS, and many of the Unicode characters icon fonts depend on are no exception. Best-case scenario, your \"favorite\" icon gets read aloud as \"black favorite star.\" Worse-case scenario, it\\'s read as \"unpronounceable\" or skipped entirely.'\n}, {\n  label: \"They Fail Poorly and Often\",\n  content: 'When your icon font fails, the browser treats it like any other font and replaces it with a fallback. Best-case scenario, you\\'ve chosen your fallback characters carefully and something weird-looking but communicative still loads. Worse-case scenario (and far more often), the user sees something completely incongruous, usually the dreaded \"missing character\" glyph.'\n}, {\n  label: \"They're a Nightmare if You're Dyslexic\",\n  content: \"Many dyslexic people find it helpful to swap out a website's typeface for something like OpenDyslexic. But icon fonts get replaced as well, which makes for a frustratingly broken experience.\"\n}, {\n  label: \"There's Already a Better Way\",\n  content: \"SVG is awesome for icons! It's a vector image format with optional support for CSS, JavaScript, reusability, accessibility and a bunch more. It was made for this sort of thing.\"\n}];\nconst App = document.querySelector(\"#app\"); // ReactDOM.render(<Accordion panels={panels} />, App);\n\nfunction ResumeList(props) {\n  function renderResumes() {\n    return props.resumes.map((resume, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accordion-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"accordion-header\",\n          id: \"panelsStayOpen-headingTwo\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"accordion-button collapsed\",\n            type: \"button\",\n            \"data-bs-toggle\": \"collapse\",\n            \"data-bs-target\": \"#panelsStayOpen-collapseTwo\",\n            \"aria-expanded\": \"false\",\n            \"aria-controls\": \"panelsStayOpen-collapseTwo\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-6 align-items-start\",\n                children: resume.institution\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-6 align-items-end\",\n                children: resume.date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"panelsStayOpen-collapseTwo\",\n          className: \"accordion-collapse collapse\",\n          \"aria-labelledby\": \"panelsStayOpen-headingTwo\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"accordion-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the second item's accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this), \" \", \"It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \".accordion-body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this), \", though the transition does limit overflow.\", resume.institution, resume.position]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, resume.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"resume List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n      panels: panels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), renderResumes()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ResumeList;\nexport default ResumeList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResumeList\");","map":{"version":3,"sources":["/Users/lesleycheung/Desktop/portfolio/frontend/src/components/ResumeList.js"],"names":["React","Link","resumes","ReactDOM","Panel","Component","constructor","props","state","height","componentDidMount","window","setTimeout","el","findDOMNode","querySelector","scrollHeight","setState","render","id","institution","position","date","type","description","activeTab","index","activateTab","isActive","innerStyle","Accordion","bind","prev","panels","map","panel","label","content","App","document","ResumeList","renderResumes","resume"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { resumes } from \"../dummyData/resumes\";\nimport ReactDOM from \"react-dom\";\nimport \"../assets/Accordion.css\";\n/**********************************************\n * Resume List Component\n * ==================================\n * This component accepts an array of objects, rendering out each object (including the navbar react link)\n * We gave it a function, and then rendered it inside the return block\n ***********************************************/\nclass Panel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      height: 0,\n    };\n  }\n\n  componentDidMount() {\n    window.setTimeout(() => {\n      const el = ReactDOM.findDOMNode(this);\n      const height =\n        el.querySelector(\".panel__inner\").scrollHeight;\n      this.setState({\n        height,\n      });\n    }, 333);\n  }\n\n  render() {\n    const {\n      //   label,\n      //   content,\n      //   array of objects\n      id,\n      institution,\n      position,\n      date,\n      type,\n      description,\n      activeTab,\n      index,\n      activateTab,\n    } = this.props;\n    const { height } = this.state;\n    const isActive = activeTab === index;\n    const innerStyle = {\n      height: `${isActive ? height : 0}px`,\n    };\n\n    return (\n      <div\n        className=\"panel\"\n        role=\"tabpanel\"\n        aria-expanded={isActive}\n      >\n        <button\n          className=\"panel__label\"\n          role=\"tab\"\n          onClick={activateTab}\n        >\n          {institution}\n        </button>\n        <div\n          className=\"panel__inner\"\n          style={innerStyle}\n          aria-hidden={!isActive}\n        >\n          <p className=\"panel__content\">{position}</p>\n          <p className=\"panel__content\">{date}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Accordion extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeTab: 0,\n    };\n\n    this.activateTab = this.activateTab.bind(this);\n  }\n\n  activateTab(index) {\n    this.setState((prev) => ({\n      activeTab: prev.activeTab === index ? -1 : index,\n    }));\n  }\n\n  render() {\n    const { panels } = this.props;\n    const { activeTab } = this.state;\n    return (\n      <div className=\"accordion\" role=\"tablist\">\n        {panels.map((panel, index) => (\n          <Panel\n            key={index}\n            activeTab={activeTab}\n            index={index}\n            {...panel}\n            activateTab={this.activateTab.bind(null, index)}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nconst panels = [\n  {\n    label: \"Seriously, Don't Use Icon Fonts\",\n    content:\n      'Icons are everywhere. These \"little miracle workers\" (as John Hicks described them) help us reinforce meaning in the interfaces we design and build. Their popularity in web design has never been greater; the conciseness and versatility of pictograms in particular make them a lovely fit for displays large and small. But icons on the web have had their fair share of challenges.',\n  },\n  {\n    label: \"Screen Readers Actually Read That Stuff\",\n    content:\n      'Most assistive devices will read aloud text inserted via CSS, and many of the Unicode characters icon fonts depend on are no exception. Best-case scenario, your \"favorite\" icon gets read aloud as \"black favorite star.\" Worse-case scenario, it\\'s read as \"unpronounceable\" or skipped entirely.',\n  },\n  {\n    label: \"They Fail Poorly and Often\",\n    content:\n      'When your icon font fails, the browser treats it like any other font and replaces it with a fallback. Best-case scenario, you\\'ve chosen your fallback characters carefully and something weird-looking but communicative still loads. Worse-case scenario (and far more often), the user sees something completely incongruous, usually the dreaded \"missing character\" glyph.',\n  },\n  {\n    label: \"They're a Nightmare if You're Dyslexic\",\n    content:\n      \"Many dyslexic people find it helpful to swap out a website's typeface for something like OpenDyslexic. But icon fonts get replaced as well, which makes for a frustratingly broken experience.\",\n  },\n  {\n    label: \"There's Already a Better Way\",\n    content:\n      \"SVG is awesome for icons! It's a vector image format with optional support for CSS, JavaScript, reusability, accessibility and a bunch more. It was made for this sort of thing.\",\n  },\n];\n\nconst App = document.querySelector(\"#app\");\n\n// ReactDOM.render(<Accordion panels={panels} />, App);\n\nfunction ResumeList(props) {\n  function renderResumes() {\n    return props.resumes.map((resume, index) => {\n      return (\n        <div key={resume.id} className=\"accordion-item\">\n          <h2\n            className=\"accordion-header\"\n            id=\"panelsStayOpen-headingTwo\"\n          >\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#panelsStayOpen-collapseTwo\"\n              aria-expanded=\"false\"\n              aria-controls=\"panelsStayOpen-collapseTwo\"\n            >\n              <div className=\"row\">\n                <div className=\"col-6 align-items-start\">\n                  {resume.institution}\n                </div>\n                <div className=\"col-6 align-items-end\">\n                  {resume.date}\n                </div>\n              </div>\n            </button>\n          </h2>\n          <div\n            id=\"panelsStayOpen-collapseTwo\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"panelsStayOpen-headingTwo\"\n          >\n            <div className=\"accordion-body\">\n              <strong>\n                This is the second item's accordion body.\n              </strong>{\" \"}\n              It is hidden by default, until the collapse\n              plugin adds the appropriate classNamees that\n              we use to style each element. These\n              classNamees control the overall appearance, as\n              well as the showing and hiding via CSS\n              transitions. You can modify any of this with\n              custom CSS or overriding our default\n              variables. It's also worth noting that just\n              about any HTML can go within the{\" \"}\n              <code>.accordion-body</code>, though the\n              transition does limit overflow.\n              {resume.institution}\n              {resume.position}\n            </div>\n          </div>\n        </div>\n      );\n    });\n  }\n  return (\n    <div>\n      <h3>resume List</h3>\n      {/* <TestAccordian /> */}\n      <Accordion panels={panels} />\n      {renderResumes()}\n    </div>\n  );\n}\n\nexport default ResumeList;\n"]},"metadata":{},"sourceType":"module"}